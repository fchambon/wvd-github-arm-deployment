name: Deploiement d'un environnement Windows Virtual Desktop
on: workflow_dispatch

env:
  #Variables plateforme 
  AZURE_RG: "RG-WVD-GH-00" # Nom du groupe de ressources
  AZURE_LOC: "northeurope" # Region Azure cible
  DEPLOYNAME: "Rollup-000" # Nom du déploiement

  #Variables Image Gold W10
  RG_IMAGES: "ADTSP-CI-PACKERIMAGE2-PROD" #Groupe de ressources contenant l'image construite via Packer
  IMAGE_WVD: "W10-EVD-20h2" #Nom de l'image Managed

  #Variables WVD
  HOSTPOOLS_NAME: "HP-CICD-01" #Nom du Hostpool
  POOLTYPE: "pooled" # Pool "pooled" ou "personal"
  LBTYPE: "BreadthFirst" # Equilibrage de charge "BreathFirst" ou "Depthfirst"
  WORKSPACE_NAME: "Workspace-01" # Nom du Workspace
  DAGNAME: "Host-Pool-01-DAG" # Nom de l'Application Group" 
  VMSIZE: "Standard_D2s_v3" # Gabarit des bureaux virtuels
  NUMBERS_OF_VM: 2 # Nombre de hosts dans le Host Pool
  HOST_NAME_PREFIX: "hostVDI" # Prefix des hosts  
  DOMAINNAME: "adtsp.net" # Nom de l'ADDS à rejoindre
  VIRTUALNETWORKRESOURCEGROUPNAME: "ADTSP-CI-INFRA-PROD" # Nom du ressource groupe du vnet joingnable par l'active directory (local) 
  VIRTUALNETWORKNAME: "ADTSP-Vnet" # Nom du Virtual Network joingnable par l'active directory (local) 
  SUBNETNAME: "vdiwvd" # Nom du subnet joingnable par l'active directory (local)
  
  # Variables pour le User Assignment (Azure AD) sur l'Application Group WVD
  AADGroupName: "WVDUsers" # Groupe AAD contenant les utilisateurs à autoriser

jobs:

  Test-Arm:
    runs-on: ubuntu-20.04
    name: Test-ARM
    

    steps:

      - name: Generation du Token Expiration Time
        shell: pwsh
        run: |
          $Expiration=$((get-date).ToUniversalTime().AddHours(2).ToString('yyyy-MM-ddTHH:mm:ss.fffffffZ'))
          echo "::set-output name=outexp::$($Expiration)"
        id: var_exp   

      - name: Test de la variable Token Expiration Time
        shell: pwsh
        run: |
          echo "Le jeton généré est: ${{ steps.var_exp.outputs.outexp }}"

      - name: Download Repo content
        uses: actions/checkout@v2

      - name: Azure authentication
        uses: Azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: RG PS Management
        uses: Azure/powershell@v1
        with:
          azPSVersion: latest
          inlineScript: |
            Get-AzResourceGroup -Name ${{ env.AZURE_RG }} -ErrorVariable notPresent -ErrorAction SilentlyContinue
            if ($notPresent)
            {
              New-AzResourceGroup -Name ${{ env.AZURE_RG }} -Location ${{ env.AZURE_LOC }}
            }

      - name: Validate WVD ARM Template
        uses: azure/CLI@1.0.4
        with:
            azcliversion: 2.19.1
            inlineScript: |
              az deployment group validate --resource-group ${{ env.AZURE_RG }} --template-file ./ARM/azurewvd.json --parameters 'hostpools_name=${{ env.HOSTPOOLS_NAME }}' 'dagname=${{ env.DAGNAME }}' 'poolType=${{ env.POOLTYPE }}' 'lbType=${{ env.LBTYPE }}' 'tokenExpirationTime=${{ steps.var_exp.outputs.outexp }}' 'workspaces_name=${{ env.WORKSPACE_NAME }}' 'vmSize=${{ env.VMSIZE }}' 'subscription_ID=${{ secrets.SUBSCRIPTION_ID }}' 'RG_Images=${{ env.RG_IMAGES  }}' 'Image_WDV=${{ env.IMAGE_WVD }}' 'Numbers_of_VM=${{ env.NUMBERS_OF_VM }}' 'host_name_prefix=${{ env.HOST_NAME_PREFIX }}' 'Username=${{ secrets.USERNAME }}' 'pwdUser=${{ secrets.USER_PWD }}' 'domainName=${{ env.DOMAINNAME }}' 'domainUsername=${{ secrets.DOMAINUSERNAME }}' 'domainUsernamePassword=${{ secrets.DOMAINUSERPWD }}' 'virtualNetworkResourceGroupName=${{ env.VIRTUALNETWORKRESOURCEGROUPNAME }}' 'virtualNetworkName=${{ env.VIRTUALNETWORKNAME }}' 'subnetName=${{ env.SUBNETNAME }}'

#      - name: Resource Group Management
#        uses: azure/CLI@1.0.4
#        with:
#          inlineScript: |
#            $rgExists = az group exists -n ${{ env.AZURE_RG }}
#            if ($rgExists -eq 'false') {
#            az group create --name ${{ env.AZURE_RG }} --location ${{ env.AZURE_LOC }}
#            }
